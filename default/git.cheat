-*- markdown -*-
% git

# タグの作成(-aは注釈付きタグ(推奨))
git tag -a <tag name> -m 'messge'

# ブランチを作る
git branch <branch>

# <起点>からブランチを作る
git branch <branch> <起点>

# <branch>に切り替え
git checkout <branch>

# ローカルのブランチをリモートにpush
git push origin <branch>

# リモートのブランチをとってくる
git checkout -b <local branch> origin/<remote branch>

# リモートのブランチをとってくる
git checkout -t origin/<remote branch>

# git rm からの復活
git reset HEAD hoge/hoge.c; git checkout hoge/hoge.c

# 同じ名の場合 -- をつける
git checkout HEAD -- FILE

# 末尾が~のファイルのステージングの取り消し(zsh)
git reset Dropbox/**/*~

# ローカルのファイルは消さずに管理から外す
git rm --cached <filename>

# git 管理外のファイルはすべて削除
git clean -dfx

# コミッターの変更
git commit --amend --author="name <address>"

# submoduleすべてにcleanを投げる
git submodule foreach git clean -fdx

# 空ブランチを作成する
git checkout --orphan doc

# diff コマンド
git diff --stat <commit> <commit>

# リモートブランチの削除(要注意)
git push --delete origin <remote branch>

# GitExtension のようなログ表示
git log --oneline --graph --decorate --all

# Commiter と Author をすべて変更
NAME="" EM="" git filter-branch -f --env-filter 'GIT_AUTHOR_NAME="${NAME}"; GIT_AUTHOR_EMAIL="${EM}"; GIT_COMMITTER_NAME="${NAME}"; GIT_COMMITTER_EMAIL="${EM}";' HEAD

# 上記ですべて変更した場合のbackupを消す
git update-ref -d refs/original/refs/heads/master

# bisect
git bisect start bad good
    git bisect run <script>
    git bisect good or bad
git bisect reset
